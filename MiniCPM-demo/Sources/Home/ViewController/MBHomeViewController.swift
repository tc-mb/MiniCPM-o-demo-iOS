//
//  MBHomeViewController.swift
//  MiniCPM-demo
//
//  Created by Alex on 2024/6/6.
//

import UIKit
import SnapKit
import Combine
import HXPhotoPicker
import llama

/// 首页 VC
@objc public class MBHomeViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UITextViewDelegate {
        
    // MARK: - properties

    /// 当前正在使用的模型：有语言模型和多模态模型
    var currentUsingModelType: CurrentUsingModelTypeV2 = .Unknown

    // llama mtmd 状态机
    var mtmdWrapperExample: MTMDWrapperExample?
    
    /// 新加的 1 秒响应 1 次的订阅者
    var cancellable: AnyCancellable?
    var cancellables = Set<AnyCancellable>()
    var lastMsg: String = ""
    
    /// subscriber for Combine
    public var dataSubscriber: AnyCancellable?

    /// subscriber for Combine
    public var perfLogSubscriber: AnyCancellable?

    /// 是否有过一轮图文对话，有的话，就可以直接对话，不用再发图了
    var hasImageAndTextConversation = false
    
    /// 是否在插入单张图片到模型中（直接点击「插入图片」按钮，插入一张图片）
    var uploadSingleImageToModel = false
    
    /// 是否在思考中？
    var thinking = false
    
    /// 是否是全屏编辑器
    var fullscreenEditor = false
    
    /// 加载多模态模型时 loading 计时、记录加载时长 log 用的一个 timer
    public var logTimer: Timer?
    public var logTimeSecond = 0.0
    
    /// 多图理解时，相应多图模型只要 load 一次即可，不用重复 load
    public var imageLoaded = false
    
    /// 在富文本编辑器模式下，处理多张图片时，要把图片耗时记下来
    var cachedImageEmbeddingPerfLog = [String: String]()
    
    /// 如果选中了视频，将来查看视频的时候，HXPhotoPicker 组件需要 PhotoAsset 格式的数据
    var cachedPhotoAssets = [String: PhotoAsset]()

    /// 如果选中的视频，则 embed 视频时，时长要按视频抽取的帧数来处理（在 +LogTimer.swift 中使用）
    var totalVideoFrameCount: Int = 0
    
    /// 这是实时录像时的帧，然后启动一个 while 循环来依次解析 embed 和 input 到模型里
    var capturedImageArray = [UIImage]()
    
    /// 是否正在实时录像
    var captureVideoFrameStatus = false
    
    /// 实时录像的 VC
    weak var liveStreamVC: SwiftyCameraMainViewController?
    var liveStreamVCShow = false
    
    // 用于显示 LLM 输出的 cell
    var lastLLMCell: MBTextTableViewCell?
    
    /// 这是一个列表
    lazy var tableView : UITableView = {
        let tv = UITableView(frame: self.view.bounds, style: .grouped)
        
        tv.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 124 + 140, right: 0)

        // 设置一个预估值
        tv.estimatedRowHeight = 34

        tv.backgroundColor = .white
        
        tv.separatorStyle = .none
        
        // 设置数据源和委托对象
        tv.dataSource = self
        tv.delegate = self
        
        // 注册一个标准的 UITableViewCell
        tv.register(MBTextTableViewCell.classForCoder(), forCellReuseIdentifier: "MBTextTableViewCell")
        tv.register(MBImageTableViewCell.classForCoder(), forCellReuseIdentifier: "MBImageTableViewCell")

        // 注册 CustomHeaderView
        tv.register(MBHomeTableViewHeaderView.self, forHeaderFooterViewReuseIdentifier: "MBHomeTableViewHeaderView")
        
        return tv
    }()

    /// 列表对应的数组
    var dataArray = [MBChatModel]()
    
    /// 顶导左边 icon view
    lazy var homeNavIconImageView: UIImageView = {
        let img = UIImageView(image: UIImage(named: "home_nav_icon"))
        img.contentMode = .scaleAspectFill
        img.clipsToBounds = true
        return img
    }()
    
    /// 底部输入框总容器
    lazy var inputContainerView: UIView = {
        let v = UIView()
        v.backgroundColor = UIColor.mb_color(with: "#F9FAFC")
        return v
    }()
    
    /// 输入框外边的那个蓝色的
    lazy var inputRoundCornerView: UIView = {
        let v = UIView()
        v.backgroundColor = .white
        v.clipsToBounds = true
        v.layer.cornerRadius = 16
        return v
    }()

    /// 免责声明
    lazy var bottomDisclaimerLabel: UILabel = {
        let lb = UILabel()
        lb.text = "Generated by AI, not our views. Do not remove this notice."
        if MBUtils.isDeviceIPad() {
            lb.font = UIFont.systemFont(ofSize: 12, weight: .regular)
        } else {
            lb.font = UIFont.systemFont(ofSize: 11, weight: .regular)
        }
        lb.textColor = UIColor.mb_color(with: "#8A8A8E")
        lb.textAlignment = .center
        lb.lineBreakMode = .byWordWrapping
        
        return lb
    }()
    
    /// 输入框
    public lazy var textInputView: UITextView = {
        let tv = UITextView()
        tv.font = UIFont.systemFont(ofSize: 16)
        tv.textContainerInset = UIEdgeInsets(top: 8, left: 0, bottom: 0, right: 0)
        tv.textColor = .black
        tv.backgroundColor = .white
        tv.returnKeyType = .send
        tv.delegate = self
        tv.autoresizingMask = .flexibleHeight
        return tv
    }()
    
    var placeholderLabel = UILabel()

    /// 发送按钮
    lazy var sendButton: UIButton = {
        let btn = UIButton()
        btn.setImage(UIImage(named: "send_icon"), for: .normal)
        btn.addTarget(self, action: #selector(handleSendText), for: .touchUpInside)
        btn.isEnabled = false
        return btn
    }()
    
    /// 选择图片
    lazy var chooseImageButton: UIButton = {
        let btn = UIButton()
        btn.setImage(UIImage(named: "image_picker_icon"), for: .normal)
        btn.addTarget(self, action: #selector(handleChooseImage), for: .touchUpInside)
        return btn
    }()

    /// 录像功能-按钮
    lazy var captureVideoButton: UIButton = {
        let btn = UIButton()
        btn.setImage(UIImage(named: "capture_video_icon"), for: .normal)
        btn.addTarget(self, action: #selector(handleCaptureVideo), for: .touchUpInside)
        return btn
    }()

    /// 临时显示输出用的 output 区域
    lazy var outputLabel: UILabel = {
        let lb = UILabel()
        lb.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        lb.backgroundColor = .white
        lb.textColor = .blue
        lb.textAlignment = .center
        lb.numberOfLines = 0
        lb.lineBreakMode = .byWordWrapping
        
        lb.isHidden = true
        
        return lb
    }()
    
    /// 临时显示输出用的 output image 区域
    lazy var outputImageView: UIImageView = {
        let oi = UIImageView()
        oi.contentMode = .scaleAspectFit
        oi.clipsToBounds = true
        oi.layer.cornerRadius = 4
        oi.isHidden = true
        return oi
    }()
    
    /// 最近一次选中的图片的 url
    var outputImageURL : URL?
    
    /// 选中的图片的大小（KB，MB）
    var outputImageFileSize: UInt64 = 0
    
    // 记录用户输入
    var latestUserInputText = ""
    
    /// 键盘的高度
    var keyboardHeight: CGFloat = 0

    /// 输出时暂停和继续的 popup view
    lazy var floatingActionView: MBFloatingActionView = {
        let v = MBFloatingActionView()
        return v
    }()

    /// 这是个蒙层，输入框进入全屏时，覆盖在顶导上用的
    public lazy var topNavGrayMaskView: UIView = {
        let v = UIView()
        v.backgroundColor = UIColor.black.withAlphaComponent(0.15)
        return v
    }()
    
    // MARK: - view life cycle
    
    public override func viewDidLoad() {
        super.viewDidLoad()

        self.view.backgroundColor = UIColor.mb_color(with: "#F9FAFC")

        Task {
            mtmdWrapperExample = MTMDWrapperExample()

            // 订阅大模型的输出
            self.subscriberLlamaMessageLog()
            
            // 启动 home vc 就加载多模态模型
            self.checkMultiModelLoadStatusAndLoadIt()
        }

        // create all sub views
        setupSubViews()

        // 添加观察者来监听键盘的显示和隐藏事件
        NotificationCenter.default.addObserver(self, 
                                               selector: #selector(keyboardWillShow(notification:)),
                                               name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, 
                                               selector: #selector(keyboardWillHide(notification:)),
                                               name: UIResponder.keyboardWillHideNotification, object: nil)
        
        // 实时录像完成的回调
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(registVideoProcessCompleteNotification(notification:)),
                                               name: NSNotification.Name("video.process.complete"), object: nil)
    }
    
    public override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // 更新导航栏标题，确保从设置页返回时能同步最新的模型选择
        updateNavTitle()
    }

    /// support screen rotate
    #if DEBUG
        // 这个代码在 My Mac(Designed for iPad) 模式下不能正确运行
    
    #else
    
    public override func viewWillTransition(to size: CGSize, with coordinator: any UIViewControllerTransitionCoordinator) {
        // re-calc all cell
        for item in self.dataArray {
            if item.type == "TEXT" {
                item.cellHeight = MBTextTableViewCell.calcCellHeight(data: item, viewWidth: size.width)
            } else if item.type == "IMAGE" {
                item.cellHeight = MBImageTableViewCell.calcCellHeight(data: item, viewWidth: size.width)
            }
        }

        self.tableView.reloadData()
    }
    
    #endif

    /// 销毁时移除观察者
    deinit {

        stopLogTimer()

        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)

        debugLog("\(self) deinit.")
    }
    
    // MARK: - create sub views
    func setupSubViews() {
        
        updateNavTitle()
        
        // create nav bar views
        setupNavBarViews()
                
        // place holder
        setupPlaceholder()
        
        // create chat list view
        setupTableView()
        
        // create input view
        setupInputView();

        // create tmp output view
        setupOutputViews()
        
        // 创建
        setupFloatingActionView()
        
        #if DEBUG
        /*
        let log = MBLLMDB.sharedInstance().loadAllMessages()
        for item in log {
            if let role = item["role"] as? String,
               let content = item["content"] as? String,
               let create_at: String = item["create_at"] as? String,
               let created = Double(create_at) {

                // Create Date object from timestamp
                let date = Date(timeIntervalSince1970: created)
                
                // Create DateFormatter
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
                dateFormatter.timeZone = TimeZone.current
                dateFormatter.locale = Locale.current
                
                // Convert Date to formatted string
                let dateString = dateFormatter.string(from: date)

                // 打印本地日志：
                debugLog("-->> 日志：\(role.count), \(content.count), \(dateString.count)")
            }
        }*/
        
        #endif
        
    }
    
    /// 更新顶导标题
    func updateNavTitle() {
        if MBUtils.isDeviceIPad() {
            let lastSelectedModelString = UserDefaults.standard.value(forKey: "current_selected_model") as? String ?? ""
            var modelDisplayedName = ""
            
            if lastSelectedModelString == "V26MultiModel" {
                // V-2.6 8B 多模态模型
                modelDisplayedName = MiniCPMModelConst.modelQ4_K_MDisplayedName
            } else if lastSelectedModelString == "V4V3BMultiModel" {
                // V-4 3.4B 多模态模型
                modelDisplayedName = MiniCPMModelConst.model4v3b_Q4_K_M_DisplayedName
            }
            
            if !modelDisplayedName.isEmpty {
                self.title = "MiniCPM-V（当前模型：\(modelDisplayedName)）"
            } else {
                self.title = "MiniCPM-V（请先下载模型）"
            }
        } else {
            self.title = "MiniCPM-V"
        }
    }
    
    func setupNavBarViews() {

        let titleDict: [NSAttributedString.Key : Any] = [NSAttributedString.Key.foregroundColor: UIColor.black]
        self.navigationController?.navigationBar.titleTextAttributes = titleDict
                
        // 纯图片 logo 放在顶导左边
        let imgButtonItem = UIBarButtonItem(image: UIImage(named: "home_nav_icon"),
                                            style: .plain,
                                            target: self,
                                            action: #selector(navImageLogoTapped))
        self.navigationItem.leftBarButtonItem = imgButtonItem
        
        // 创建一组 UIBarButtonItem
        let settingButton = UIBarButtonItem(image: UIImage(named: "setting_icon"),
                                            style: .plain,
                                            target: self,
                                            action: #selector(settingButtonTapped))
        settingButton.tintColor = .black

        // delete icon
        let deleteButton = UIBarButtonItem(image: UIImage(named: "delete_icon"),
                                           style: .plain,
                                           target: self,
                                           action: #selector(deleteButtonTapped))
        deleteButton.tintColor = UIColor.mb_color(with: "#FF3B30")
        
        // 设置 NavigationItem 的 rightBarButtonItem 属性
        self.navigationItem.rightBarButtonItems = [settingButton, deleteButton]
        
        // 白色顶导
        self.navigationController?.setNavigationBackgroundColor(UIColor.mb_color(with: "#F9FAFC") ?? .white)
    }
    
    func setupTableView() {
        // 添加 UITableView 到当前视图
        tableView.contentInsetAdjustmentBehavior = .never
        self.view.addSubview(tableView)
        tableView.backgroundColor = UIColor.mb_color(with: "#F9FAFC")
        tableView.snp.makeConstraints { make in
            make.top.equalTo(0)
            make.left.right.equalTo(self.view)
            make.bottom.equalTo(self.view.snp.bottom)
        }
    }
    
    func setupInputView() {
        
        var inputViewMargin: CGFloat = 120
        
        if MBUtils.isDeviceIPhone() {
            inputViewMargin = 24
        }

        let tapResignKeyboardGesture = UITapGestureRecognizer(target: self, action: #selector(handleResignKeyboard))
        self.inputContainerView.isUserInteractionEnabled = true
        self.inputContainerView.addGestureRecognizer(tapResignKeyboardGesture)
        self.view.addSubview(self.inputContainerView)
        self.inputContainerView.snp.makeConstraints { make in
            make.left.equalTo(0)
            make.right.equalTo(0)
            make.height.equalTo(130)
            make.bottom.equalTo(self.view.snp.bottom).offset(0)
        }
        
        // 那个蓝色圆角的线框
        self.inputContainerView.addSubview(self.inputRoundCornerView)
        self.inputRoundCornerView.snp.makeConstraints { make in
            make.top.equalTo(self.inputContainerView.snp.top).offset(2)
            make.bottom.equalTo(self.inputContainerView.snp.bottom).offset(-64)
            make.left.equalTo(inputViewMargin)
            make.right.equalTo(-inputViewMargin)
        }
        
        // add shadow
        self.inputRoundCornerView.layer.masksToBounds = false
        self.inputRoundCornerView.layer.shadowColor = UIColor.black.withAlphaComponent(0.05).cgColor
        self.inputRoundCornerView.layer.shadowOpacity = 1
        self.inputRoundCornerView.layer.shadowOffset = CGSize(width: 0, height: 4)
        self.inputRoundCornerView.layer.shadowRadius = 4
        let rc = CGRect(x: -2,
                        y: -2,
                        width: self.view.frame.size.width - inputViewMargin*2 + 4,
                        height: 64 + 4)
        self.inputRoundCornerView.layer.shadowPath = UIBezierPath(rect: rc).cgPath

        // textview 输入框
        self.inputRoundCornerView.addSubview(self.textInputView)
        self.textInputView.snp.makeConstraints { make in
            make.left.equalTo(12)
            make.top.equalTo(16)
            make.bottom.equalTo(-14)
            make.right.equalTo(-173)
        }

        // 发送按钮
        self.inputRoundCornerView.addSubview(self.sendButton)
        self.sendButton.snp.makeConstraints { make in
            make.bottom.equalTo(-14)
            make.width.height.equalTo(40)
            make.right.equalTo(-16)
        }

        // 选择图片 button
        self.inputRoundCornerView.addSubview(self.chooseImageButton)
        self.chooseImageButton.snp.makeConstraints { make in
            make.bottom.equalTo(-14)
            make.width.height.equalTo(40)
            make.right.equalTo(self.sendButton.snp.left).offset(-16)
        }

        // 实时捕获视频 button
        self.inputRoundCornerView.addSubview(self.captureVideoButton)
        self.captureVideoButton.snp.makeConstraints { make in
            make.bottom.equalTo(-14)
            make.width.height.equalTo(40)
            make.right.equalTo(self.chooseImageButton.snp.left).offset(-16)
        }

        /// 免责声明
        self.inputContainerView.addSubview(bottomDisclaimerLabel)
        bottomDisclaimerLabel.snp.makeConstraints { make in
            make.centerX.equalTo(self.inputContainerView)
            make.height.equalTo(14)
            make.top.equalTo(self.inputRoundCornerView.snp.bottom).offset(14)
            make.left.right.equalTo(self.inputContainerView)
        }
    }
        
    /// 创建 uitextview 内嵌的文本区 placeholder view
    func setupPlaceholder() {
        // 创建占位符 UILabel
        placeholderLabel.translatesAutoresizingMaskIntoConstraints = false
        placeholderLabel.text = "发消息"
        placeholderLabel.textColor = UIColor.mb_color(with: "#8A8A8E")
        placeholderLabel.font = textInputView.font
        textInputView.addSubview(placeholderLabel)
        placeholderLabel.snp.makeConstraints { make in
            make.left.equalTo(8)
            make.centerY.equalTo(textInputView)
        }
    }
    
    /// 创建输出窗口
    func setupOutputViews() {
        // 输出文本
        self.view.addSubview(self.outputLabel)
        self.outputLabel.snp.makeConstraints { make in
            make.center.equalTo(self.view)
            make.width.height.equalTo(400)
        }
        
        // 输出选中照片
        inputContainerView.addSubview(self.outputImageView)
        outputImageView.snp.makeConstraints { make in
            make.right.equalTo(self.inputRoundCornerView.snp.left).offset(-12)
            make.centerY.equalTo(self.inputRoundCornerView)
            make.width.equalTo(32)
            make.height.equalTo(48)
        }
    }
    
    /// 创建暂停、继续悬浮按钮
    func setupFloatingActionView() {
        view.addSubview(floatingActionView)
        floatingActionView.isHidden = true
        floatingActionView.snp.makeConstraints { make in
            make.centerX.equalTo(self.view)
            make.width.equalTo(140)
            make.height.equalTo(44)
            make.bottom.equalTo(self.inputContainerView.snp.top).offset(-10)
        }
        floatingActionView.onTap = { [weak self] value in
            // 通知状态机取消本次输出
            self?.mtmdWrapperExample?.stopGeneration()
        }
    }
    
    // MARK: - 列表代理及数据源
    
    /// UITableViewDataSource 方法 - 返回 cell 总数
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataArray.count
    }
    
    /// 生成指定的 cell
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.row >= dataArray.count {
            return UITableViewCell()
        }
    
        let model = dataArray[indexPath.row]
        
        if model.type == "TEXT" {
            
            if let cell = tableView.dequeueReusableCell(withIdentifier: "MBTextTableViewCell", for: indexPath) as? MBTextTableViewCell {
                cell.selectionStyle = .none
                cell.bindTextWith(data: model)
                // cell toolbar 点击事件
                cell.onTap = { [weak self] model, actionName in
                    self?.cellToolbarClickEvent(model, action: actionName)
                }
                return cell
            }
            
            return UITableViewCell()

        } else if model.type == "IMAGE" {
            
            if let cell = tableView.dequeueReusableCell(withIdentifier: "MBImageTableViewCell", for: indexPath) as? MBImageTableViewCell {
                cell.selectionStyle = .none
                cell.bindImageWith(data: model)
                // 查看大图，而预览视频时，需要的是 [PhotoAsset] 数组
                cell.onTapImageCover = { [weak self] img, imageURLString in
                    if let keyStr = imageURLString,
                        !keyStr.isEmpty,
                       let photoAsset = self?.cachedPhotoAssets[keyStr], photoAsset.mediaType == .video {
                        // 视频使用单独播放器进行预览
                        HXPhotoPicker.PhotoBrowser.show([photoAsset])
                    } else if imageURLString?.hasSuffix(".mov") == true {
                        if let s = imageURLString, let url = URL(string: s) {
                            // 如果是录像生成的视频，则用 SwiftyCamera 进行预览
                            let videoVC = SwiftyCameraPreviewVideoViewController(videoURL: url)
                            videoVC.modalPresentationStyle = .fullScreen
                            self?.present(videoVC, animated: true)
                        }
                    } else if let img = img {
                        // 创建图片预览器，预览图片
                        let imageVC = MBImageVideoViewController(image: img)
                        self?.present(imageVC, animated: true)
                    }
                }

                return cell
            }

            return UITableViewCell()

        }
        
        return UITableViewCell()
    }
    
    /// 返回 cell 高度
    public func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        if indexPath.row < dataArray.count {
            let model = dataArray[indexPath.row]
            // 返回 cell 的高度
            return model.cellHeight
        }

        return 0
    }
    
    /// UITableViewDelegate 方法，点击了指定 cell
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
        self.textInputView.resignFirstResponder()
        if indexPath.row < dataArray.count {
            let model = dataArray[indexPath.row]
            if model.type == "IMAGE" {
                // 图片自己有自己的点击事件
                return
            } else if model.type == "TEXT" {
                if model.role == "llm" {
                    // 注意，只有点击 LLM 输出的 文字 cell，则会显示 popup action button
                    if let curCell = tableView.cellForRow(at: indexPath) as? MBTextTableViewCell {
                        // 显示 popup area
                        curCell.showPopupActionWith(show: !model.hasFloatingActionButton)
                    }
                }
            }
        }
        
    }

    // 返回 section header 高度
    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 480
    }
    
    // 配置 section header
    public func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = tableView.dequeueReusableHeaderFooterView(withIdentifier: "MBHomeTableViewHeaderView") as! MBHomeTableViewHeaderView
        
        // 引导用的 4 个 tips 点击事件
        headerView.setupTapEvent { [weak self] str in
            self?.placeholderLabel.isHidden = true
            self?.textInputView.text = str
            if let b = self?.sendButton {
                self?.handleSendText(b)
            }
        }

        return headerView
    }

    // MAKR: - TextView 事件
    
    public func textViewDidBeginEditing(_ textView: UITextView) {
        if textView.text == "" {
            placeholderLabel.isHidden = false
            sendButton.isEnabled = false
        } else {
            placeholderLabel.isHidden = true
            sendButton.isEnabled = true
        }
    }
    
    public func textViewDidChange(_ textView: UITextView) {
        if textView.text == "" {
            placeholderLabel.isHidden = false
            sendButton.isEnabled = false
        } else {
            placeholderLabel.isHidden = true
            sendButton.isEnabled = true
        }
    }
    
    public func textViewDidEndEditing(_ textView: UITextView) {
        if textView.text == "" {
            placeholderLabel.isHidden = false
            sendButton.isEnabled = false
        } else {
            placeholderLabel.isHidden = true
            sendButton.isEnabled = true
        }
    }

    // MARK: - 与 llamaState 交互的逻辑
    
    /// 点击「发送」按钮的事件的处理逻辑
    @objc public func handleSendText(_ sender: UIButton) {

        // 收起键盘
        textInputView.resignFirstResponder()

        // 输入框上的文字
        let inputText = textInputView.text.trimmingCharacters(in: .whitespacesAndNewlines)

        // 输入框的非空逻辑检查
        if inputText.isEmpty {
            self.showErrorTips("请输入内容")
            return
        }
        
        if thinking {
            // 如果上一次输出不没结束，禁止重复点击
            self.showErrorTips("请稍等")
            return
        }

        // 用户手工点击图片选择器上传了图片，或者在富文本编辑器插入了图片也同时输入了文字
        Task {
            await processImageAndTextMixModeSendLogic()
        }
    }


    // MARK: - 更新 cell
    
    /// 添加一个 文本 cell 到 tableview 里
    func appendTextDataToCellWith(text: String?, role: String?) {
        let textModel = MBChatModel()
        textModel.type = "TEXT"
        textModel.contentText = text
        textModel.role = role
        textModel.msgId = NSUUID().uuidString
        textModel.createTime = NSDate().timeIntervalSince1970 * 1000
        textModel.cellHeight = MBTextTableViewCell.calcCellHeight(data: textModel, viewWidth: self.view.frame.width)
        dataArray.append(textModel)
    }
    
    /// 添加一个 图片 cell 到 tableview 里，注意：photoAsset 是 HXPhotoPickerSwift 组件中的类型
    func appendImageDataToCellWith(image: UIImage?, imageURL: String? = nil) {
        let imgModel = MBChatModel()
        imgModel.type = "IMAGE"
        imgModel.role = "user"
        imgModel.contentImage = image
        imgModel.msgId = NSUUID().uuidString
        imgModel.createTime = NSDate().timeIntervalSince1970 * 1000
        imgModel.imageURLString = imageURL
        imgModel.cellHeight = MBImageTableViewCell.calcCellHeight(data: imgModel, viewWidth: self.view.frame.width)
        
        // 此处，如果是富文本编辑器模式上传的图片，预处理时间在 cached 中放着
        if let imageURL = imageURL,
            let perflogString = self.cachedImageEmbeddingPerfLog[imageURL],
           !perflogString.isEmpty {
            var perfLog = perflogString
            perfLog = perfLog.replacingOccurrences(of: "Loaded model ", with: "\t预处理耗时：")
            
            var size = "0 KB"
            let imageCount = image?.jpegData(compressionQuality: 1)?.count ?? 0
            if imageCount > 0 {
                if imageCount / 1000 < 1000 {
                    size = String(format: "%.0f KB", ceil(Double(imageCount) / 1000.0))
                } else {
                    size = String(format: "%.0f MB", ceil(Double(imageCount) / 1000.0 / 1000.0))
                }
            }

            imgModel.performLog = "\(Int(image?.size.width ?? 0))x\(Int(image?.size.height ?? 0)) (\(size)) \t\(perfLog)"
        } else {
            imgModel.performLog = nil
        }
        
        dataArray.append(imgModel)
    }
    
    /// 每次输入完，要把列表滚动到归底部
    func tableViewScrollToBottom() {
        // scroll to bottom
        if dataArray.count == 1 {
            tableView.reloadData()
            
            // 计算需要滚动到的位置，确保 footerview 也可见
            let lastRow = dataArray.count - 1
            let lastIndexPath = IndexPath(row: lastRow, section: 0)
            
            // 先滚动到最后一个 cell
            tableView.scrollToRow(at: lastIndexPath, at: .bottom, animated: true)
            
            // 然后额外滚动一些距离，确保 footerview 也可见
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in
                guard let self = self else { return }
                
                // 获取当前 content offset
                let currentOffset = self.tableView.contentOffset
                
                // 计算额外的滚动距离，确保 footerview 可见
                // 这里假设 footerview 高度约为 50-60 像素（包括间距）
                let extraOffset: CGFloat = 80
                
                // 设置新的 content offset
                let newOffset = CGPoint(x: currentOffset.x, y: currentOffset.y + extraOffset)
                self.tableView.setContentOffset(newOffset, animated: true)
            }
        } else if dataArray.count > 1 {
            tableView.reloadData()
            
            // 计算需要滚动到的位置，确保 footerview 也可见
            let lastRow = dataArray.count - 1
            let lastIndexPath = IndexPath(row: lastRow, section: 0)
            
            // 先滚动到最后一个 cell
            tableView.scrollToRow(at: lastIndexPath, at: .bottom, animated: true)
        }
    }
}

extension MBHomeViewController {
    
    /// 显示错误提示
    func showErrorTips(_ str: String?, delay: TimeInterval = 2) {
        DispatchQueue.main.async {
            let hud = MBHUD.showAdded(to: self.view, animated: true)
            hud.mode = .text
            hud.label.text = str
            hud.hide(animated: true, afterDelay: delay)
        }
    }
}

extension MBHomeViewController {

    /// 把之前已经显示的 cell 上的所有 toolbar 和 popup 都隐藏掉
    func hideAllCellToolbarAndPopup() {
        for item in dataArray {
            if item.role == "llm" {
                item.hasBottomToolbar = false
                item.hasFloatingActionButton = false
                // 重新计算 cell 的高度（因为要隐藏 toolbar）
                item.cellHeight = MBTextTableViewCell.calcCellHeight(data: item, viewWidth: self.view.frame.width)
            }
        }

        self.tableView.reloadData()
    }
    
}
